/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'java'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.flywaydb.flyway" version "9.22.0"
    id "org.openapi.generator" version "6.6.0"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'



repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.4.0')


    // This dependency is used by the application.
    implementation 'org.postgresql:postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.3'

    // https://mvnrepository.com/artifact/javax.annotation/javax.annotation-api
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'practicetask.App'
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("$rootDir/template-openAPI.json")
    outputDir.set("$rootDir/generated")
    apiPackage.set("practicetask")
    modelPackage.set("practicetask")
    globalProperties.set([
        apis: "",
    ])
    configOptions = [    
        library: "spring-cloud",
        skipDefaultInterface: "true",
        swaggerDocketConfig: "false",
        unhandledException: "true",
        booleanGetterPrefix: "is",
        hideGenerationTimestamp: "true",
        interfaceOnly: "true",    
        dateLibrary: "java8",    
        useBeanValidation: "false",    
        openApiNullable: "false",    
        documentationProvider : "none",    
        annotationLibrary: "none"]

}